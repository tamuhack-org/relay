// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Project {
  projectId   String          @id @default(cuid())
  projectName String
  users       User[]          @relation("usersToProjects")
  admins      User[]          @relation("adminsToProjects")
  lists       MailingList[]
  templates   EmailTemplate[]
  members     ListMember[]
}

model EmailTemplate {
  templateId String   @id @default(cuid())
  name       String
  content    String
  link       String
  Project    Project? @relation(fields: [projectId], references: [projectId])
  projectId  String?
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  mailingLists  MailingList[]
  userProjects  Project[]     @relation("usersToProjects")
  adminProjects Project[]     @relation("adminsToProjects")
  Account       Account[]
}

model MailingList {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  admins      User[]
  members     ListMember[]
  project     Project      @relation(fields: [projectId], references: [projectId])
  projectId   String
}

model SentEmail {
  sentId   Int            @id @default(autoincrement())
  email    String
  template SentTemplate[]
  datetime DateTime
}

model SentTemplate {
  sent            Int        @id @default(autoincrement())
  sentId          Int        @unique
  datetime        DateTime
  template        String
  SentEmail       SentEmail? @relation(fields: [sentEmailSentId], references: [sentId])
  sentEmailSentId Int?
}

model ListMember {
  id           Int           @id @default(autoincrement())
  email        String
  mailingLists MailingList[]
  Project      Project?      @relation(fields: [projectId], references: [projectId])
  projectId    String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
