// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model VerificationToken {  // Managed by next-auth
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {  // Managed by next-auth
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  userProjects         Project[]       @relation("UserToProject")  // We have to specify the relation name because users and admins are both Users[]
  adminProjects        Project[]       @relation("AdminToProject") // We have to specify the relation name because users and admins are both Users[]
  lastUpdatedTemplates EmailTemplate[]
  lastUpdatedLists     MailingList[]
  sentEmailsInitiated  SentEmail[]

  // Managed by next-auth
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?
  Account       Account[]
}

model Project {
  id          String          @id @default(cuid())
  projectName String
  users       User[]          @relation("UserToProject")  // We have to specify the relation name because users and admins are both Users[]
  admins      User[]          @relation("AdminToProject") // We have to specify the relation name because users and admins are both Users[]
  lists       MailingList[]
  templates   EmailTemplate[]
  sentEmails  SentEmail[]
  listMembers ListMember[]
}

model EmailTemplate {
  id                  String   @id @default(cuid())
  name                String
  description         String
  s3Url               String
  lastUpdatedTime     DateTime  // TODO when updating, check if this is newer than when current user started editing and warn them
  project             Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId           String?
  sentEmailsUsing     SentEmail[]
  lastUpdatedByUserId String?
  lastUpdatedBy       User?   @relation(fields: [lastUpdatedByUserId], references: [id], onDelete: SetNull)
}



model MailingList {
  id                  String       @id @default(cuid())
  name                String
  description         String
  lastUpdated         DateTime
  members             ListMember[]
  sentEmails          SentEmail[]

  project             Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId           String

  lastUpdatedByUserId String?
  lastUpdatedBy       User?        @relation(fields: [lastUpdatedByUserId], references: [id], onDelete: SetNull)
}

model SentEmail {
  id                String            @id @default(cuid())

  // "Templates" and "SentTemplates" are different
  // Templates:
  //   - are stored in the EmailTemplate table, with the content stored in S3
  //   - can edited by users
  //   - are used to create SentTemplates
  // SentTemplates:
  //   - (!!!) represent the state of the EmailTemplate at the time of sending
  //   - are created and stored in S3 when a user sends an email; one SentTemplate per SentEmail
  //   - are for viewing only
  sentTemplateS3Url String
  recipients        ListMember[]

  initiatedTime     DateTime  // TODO if the template or mailing list is updated after this time, show in the UI
  completedTime     DateTime?

  project           Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId         String?
  mailingList       MailingList?   @relation(fields: [mailingListId], references: [id], onDelete: SetNull)
  mailingListId     String?
  template          EmailTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId        String?
  initiatedBy       User?          @relation(fields: [initiatedByUserId], references: [id], onDelete: SetNull)
  initiatedByUserId String?
}

model ListMember {
  id                  String        @id @default(cuid())
  emailAddress        String
  project             Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId           String
  mailingLists        MailingList[]
  receivedEmails      SentEmail[]
  manuallyAdded       Boolean
  selfSignedUp        Boolean
  confirmedSelfSignup Boolean
  unsubscribed        Boolean
}

